class Solution{
  private:
    vector<int> prevSmallerElement(int* heights, int n){
        stack<int>s;
        s.push(-1);
        vector<int> ans(n);
        
        for(int i=0; i<n; i++){
            
            int curr = heights[i];
            while(s.top() != -1 && heights[s.top()] >= curr){
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    vector<int> nextSmallerElement(int* heights, int n){
        stack<int>s;
        s.push(-1);
        vector<int> ans(n);

        for(int i=n-1; i>=0; i--){
            int curr = heights[i];
            while(s.top() != -1 && heights[s.top()] >= curr){
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    int largestRectangleArea(int* heights, int n) {

        vector<int> prev(n);
        prev = prevSmallerElement(heights, n);

        vector<int> next(n);
        next = nextSmallerElement(heights, n);

        int maxArea = INT_MIN;
        for(int i=0; i<n; i++){

            if(next[i] == -1){
                next[i] = n;   
            }

            int l = heights[i];
            int b = next[i] - prev[i] - 1;
            int area = l*b;

            maxArea = max(maxArea, area);
        }
        return maxArea;
    }
    
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        int area = largestRectangleArea(M[0], m);
        
        for(int i=1; i<n; i++){
            for(int j=0; j<m; j++){
                if(M[i][j] == 1){
                    M[i][j] += M[i-1][j];
                }else{
                    M[i][j] = 0;
                }
            }
            area = max(area, largestRectangleArea(M[i], m));
        }
        return area;
    }
};
